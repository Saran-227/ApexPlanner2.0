"use client"

import { useState } from "react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { ChevronLeft, ChevronRight, Clock, BookOpen, Target, CheckCircle, CalendarPlus } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

interface StudyPlan {
  goal: string
  mood: string
  weeks: Array<{
    week: number
    title: string
    topics: string[]
    duration: string
    days: string[]
    dailyTasks: Array<{
      date: string
      tasks: string[]
      duration: string
      intensity: string
      completed?: boolean
    }>
  }>
}

interface StudyCalendarProps {
  studyPlan: StudyPlan
}

export function StudyCalendar({ studyPlan }: StudyCalendarProps) {
  const [currentDate, setCurrentDate] = useState(new Date())
  const [selectedDate, setSelectedDate] = useState<string | null>(null)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [completedTasks, setCompletedTasks] = useState<Set<string>>(new Set())
  const { toast } = useToast()

  // Get all tasks from the study plan
  const allTasks = studyPlan.weeks.flatMap((week) => week.dailyTasks)

  // Create a map of dates to tasks
  const tasksByDate = allTasks.reduce(
    (acc, task) => {
      acc[task.date] = task
      return acc
    },
    {} as Record<string, (typeof allTasks)[0]>,
  )

  const year = currentDate.getFullYear()
  const month = currentDate.getMonth()

  const firstDayOfMonth = new Date(year, month, 1)
  const lastDayOfMonth = new Date(year, month + 1, 0)
  const firstDayOfWeek = firstDayOfMonth.getDay()
  const daysInMonth = lastDayOfMonth.getDate()

  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ]

  const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]

  const goToPreviousMonth = () => {
    setCurrentDate(new Date(year, month - 1, 1))
  }

  const goToNextMonth = () => {
    setCurrentDate(new Date(year, month + 1, 1))
  }

  const formatDateKey = (date: Date) => {
    return date.toISOString().split("T")[0]
  }

  const handleDateClick = (day: number) => {
    const clickedDate = new Date(year, month, day)
    const dateKey = formatDateKey(clickedDate)

    if (tasksByDate[dateKey]) {
      setSelectedDate(dateKey)
      setIsDialogOpen(true)
    }
  }

  const completeTask = (dateKey: string) => {
    setCompletedTasks((prev) => new Set([...prev, dateKey]))
    toast({
      title: "Task Completed! ðŸŽ‰",
      description: "Great job! You've earned 50 Apex points.",
    })
  }

  const getIntensityColor = (intensity: string) => {
    switch (intensity) {
      case "high":
        return "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300"
      case "medium":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300"
      case "light":
        return "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300"
      default:
        return "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300"
    }
  }

  const selectedTask = selectedDate ? tasksByDate[selectedDate] : null
  const isTaskCompleted = selectedDate ? completedTasks.has(selectedDate) : false

  const generateGoogleCalendarLink = (task: (typeof allTasks)[0]) => {
    const eventTitle = encodeURIComponent(`Apex Planner: ${task.tasks[0] || studyPlan.goal}`)
    const eventDescription = encodeURIComponent(
      `Study Session for: ${studyPlan.goal}\n\nTasks:\n${task.tasks.map((t) => `- ${t}`).join("\n")}\n\nDuration: ${task.duration}\nIntensity: ${task.intensity}\n\nGenerated by Apex Planner`,
    )

    const startDate = new Date(task.date + "T09:00:00") // Default to 9 AM
    const endDate = new Date(startDate.getTime() + 60 * 60 * 1000) // Default 1 hour duration

    // Attempt to parse duration from task.duration (e.g., "2 hours")
    const durationMatch = task.duration.match(/(\d+)\s*hour/)
    if (durationMatch && durationMatch[1]) {
      const hours = Number.parseInt(durationMatch[1], 10)
      endDate.setTime(startDate.getTime() + hours * 60 * 60 * 1000)
    }

    const startISO = startDate.toISOString().replace(/[-:]|\.\d{3}/g, "")
    const endISO = endDate.toISOString().replace(/[-:]|\.\d{3}/g, "")

    return `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${eventTitle}&details=${eventDescription}&dates=${startISO}/${endISO}&sf=true&output=xml`
  }

  return (
    <div className="space-y-4">
      {/* Calendar Header */}
      <div className="flex items-center justify-between">
        <h3 className="text-xl font-semibold">
          {monthNames[month]} {year}
        </h3>
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" onClick={goToPreviousMonth}>
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <Button variant="outline" size="sm" onClick={goToNextMonth}>
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* Calendar Grid */}
      <div className="grid grid-cols-7 gap-1">
        {/* Day Headers */}
        {dayNames.map((day) => (
          <div key={day} className="p-2 text-center text-sm font-medium text-muted-foreground">
            {day}
          </div>
        ))}

        {/* Empty cells for days before the first day of the month */}
        {Array.from({ length: firstDayOfWeek }, (_, index) => (
          <div key={`empty-${index}`} className="p-2 h-24"></div>
        ))}

        {/* Days of the month */}
        {Array.from({ length: daysInMonth }, (_, index) => {
          const day = index + 1
          const date = new Date(year, month, day)
          const dateKey = formatDateKey(date)
          const hasTask = tasksByDate[dateKey]
          const isToday = new Date().toDateString() === date.toDateString()
          const isCompleted = completedTasks.has(dateKey)

          return (
            <div
              key={day}
              className={`p-2 h-24 border rounded-lg cursor-pointer transition-all hover:bg-muted/50 ${
                isToday ? "border-primary bg-primary/5" : "border-border"
              } ${hasTask ? "bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800" : ""} ${
                isCompleted ? "bg-green-50 dark:bg-green-950 border-green-200 dark:border-green-800" : ""
              }`}
              onClick={() => handleDateClick(day)}
            >
              <div className="flex flex-col h-full">
                <span className={`text-sm font-medium ${isToday ? "text-primary" : ""}`}>{day}</span>
                {hasTask && (
                  <div className="flex-1 mt-1">
                    <div className="text-xs text-blue-600 dark:text-blue-400 truncate">
                      {hasTask.tasks.length} task{hasTask.tasks.length > 1 ? "s" : ""}
                    </div>
                    <div className="flex items-center justify-between mt-1">
                      <Badge className={`text-xs ${getIntensityColor(hasTask.intensity)}`} variant="secondary">
                        {hasTask.intensity}
                      </Badge>
                      {isCompleted && <CheckCircle className="h-3 w-3 text-green-600" />}
                    </div>
                  </div>
                )}
              </div>
            </div>
          )
        })}
      </div>

      {/* Task Details Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <BookOpen className="mr-2 h-5 w-5" />
              Study Tasks
              {isTaskCompleted && <CheckCircle className="ml-2 h-5 w-5 text-green-600" />}
            </DialogTitle>
            <DialogDescription>
              {selectedDate &&
                new Date(selectedDate + "T00:00:00").toLocaleDateString("en-US", {
                  weekday: "long",
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
            </DialogDescription>
          </DialogHeader>

          {selectedTask && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Clock className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm font-medium">{selectedTask.duration}</span>
                </div>
                <Badge className={getIntensityColor(selectedTask.intensity)}>{selectedTask.intensity} intensity</Badge>
              </div>

              <div>
                <h4 className="font-medium mb-2 flex items-center">
                  <Target className="mr-2 h-4 w-4" />
                  Tasks for Today:
                </h4>
                <ul className="space-y-2">
                  {selectedTask.tasks.map((task, index) => (
                    <li key={index} className="flex items-start space-x-2">
                      <div className="w-2 h-2 rounded-full bg-primary mt-2 flex-shrink-0"></div>
                      <span className="text-sm">{task}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {!isTaskCompleted && selectedDate && (
                <Button onClick={() => completeTask(selectedDate)} className="w-full" size="sm">
                  <CheckCircle className="mr-2 h-4 w-4" />
                  Mark as Completed (+50 Apex Points)
                </Button>
              )}

              {isTaskCompleted && (
                <div className="text-center p-4 bg-green-50 dark:bg-green-950 rounded-lg">
                  <CheckCircle className="h-8 w-8 text-green-600 mx-auto mb-2" />
                  <p className="text-sm font-medium text-green-600">Task Completed!</p>
                  <p className="text-xs text-muted-foreground">You earned 50 Apex points</p>
                </div>
              )}

              <a
                href={generateGoogleCalendarLink(selectedTask)}
                target="_blank"
                rel="noopener noreferrer"
                className="w-full"
              >
                <Button variant="outline" className="w-full mt-4 bg-transparent">
                  <CalendarPlus className="mr-2 h-4 w-4" />
                  Add to Google Calendar
                </Button>
              </a>

              <div className="pt-2 border-t">
                <p className="text-xs text-muted-foreground">
                  ðŸ’¡ Tip:{" "}
                  {selectedTask.intensity === "high"
                    ? "Take breaks every 45 minutes to maintain focus"
                    : selectedTask.intensity === "medium"
                      ? "Stay consistent with your study schedule"
                      : "Take your time and don't rush through the material"}
                </p>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}
